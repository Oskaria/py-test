import random
from collections import Counter

def serialize(numbers):
    # Вычисляем частоты для чисел
    freq = Counter(numbers)
    # Обрабатываем числа от 1 до 300 в порядке возрастания
    parts = []
    # временный блок для чисел, встречающихся ровно 1 раз
    block = []
    for num in range(1, 301):
        if num not in freq:
            # если число отсутствует, сначала сбрасываем блок
            if block:
                parts.append(_format_block(block))
                block = []
            continue
        if freq[num] == 1:
            block.append(num)
        else:
            # перед выводом числа с количеством, сбрасываем накопленный блок, если есть
            if block:
                parts.append(_format_block(block))
                block = []
            parts.append(f"{num}*{freq[num]}")
    if block:
        parts.append(_format_block(block))
    return ",".join(parts)

def _format_block(block):
    # Если в блоке только одно число – просто число
    # Если несколько – диапазон (start-end) если они подряд,
    # Если они не подряд, то выводим через запятую.
    # Предполагаем, что блок уже отсортирован и все числа встречаются ровно 1 раз.
    if not block:
        return ""
    block = sorted(block)
    ranges = []
    start = block[0]
    prev = start
    for num in block[1:]:
        if num == prev + 1:
            prev = num
        else:
            if start == prev:
                ranges.append(str(start))
            else:
                ranges.append(f"{start}-{prev}")
            start = num
            prev = num
    if start == prev:
        ranges.append(str(start))
    else:
        ranges.append(f"{start}-{prev}")
    return ",".join(ranges)

def deserialize(data):
    numbers = []
    # Разбиваем по запятым. Так как внутри блоков диапазоны разделяются запятыми, надо быть осторожными:
    # мы формируем итоговый список, разбивая строку по запятым, затем обрабатывая каждый токен.
    # Токены имеют формат:
    # - "X" для числа, встречающегося ровно один раз,
    # - "X-Y" для диапазона последовательных чисел (каждое встречается по одному разу),
    # - "X*Z" для числа X, встречающегося Z раз.
    tokens = data.split(",")
    for token in tokens:
        if "*" in token:
            num, count = map(int, token.split("*"))
            numbers.extend([num] * count)
        elif "-" in token:
            start, end = map(int, token.split("-"))
            numbers.extend(range(start, end + 1))
        elif token:  # просто число
            numbers.append(int(token))
    return numbers

# Функция для тестирования
def test_compression(original):
    serialized = serialize(original)
    deserialized = deserialize(serialized)
    # Поскольку порядок не важен, сравним отсортированные списки
    is_correct = sorted(original) == sorted(deserialized)
    compression_ratio = len(serialized) / (len(str(original)) - 2)  # без учета квадратных скобок
    return original, serialized, compression_ratio, is_correct

# Тесты
test_cases = [
    [1, 2, 3, 4, 5],
    random.sample(range(1, 301), 50),
    random.sample(range(1, 301), 100),
    random.choices(range(1, 301), k=500),
    random.choices(range(1, 301), k=300),
    list(range(1, 10)),
    list(range(10, 100)),
    list(range(100, 301)),
    sorted(random.choices(range(1, 301), k=900))
]

for case in test_cases:
    original, compressed, ratio, is_correct = test_compression(case)
    print(f"Original: {original}\nCompressed: {compressed}\nCompression Ratio: {ratio:.2f}\nCorrect: {is_correct}\n")
